#<?cfg paf policy ?>

camera:        "../description/camera"
defects:    "../description/defects"

needCalibRegistry: false

levels: {
    visit: "snap" "raft" "sensor" "channel"
    raft: "snap" "sensor" "channel"
    sensor: "snap" "channel"
    snap: "channel"
    tract: "patch"
}
defaultLevel: "sensor"
defaultSubLevels: {
    visit: "sensor"
    raft: "sensor"
    sensor: "channel"
}

# exposures and datasets which are needed for all of the mappers are defined
# in the obs_base package (in either exposures.yaml or datasets.yaml).
# Where a modification to such a dataset is required for a particular camera,
# (e.g., for a template or specialized python type), the modification will
# appear below as a partial dataset definition.

exposures: {
    raw: {
        template:    "raw/v%(visit)d-f%(filter)s/E%(snap)03d/R%(raft)s/S%(sensor)s/imsim_%(visit)d_R%(raft)s_S%(sensor)s_C%(channel)s_E%(snap)03d.fits.gz"
    }
    eimage: {
        template:    "eimage/v%(visit)d-f%(filter)s/E%(snap)03d/R%(raft)s/eimage_%(visit)d_R%(raft)s_S%(sensor)s_E%(snap)03d.fits.gz"
        python:      "lsst.afw.image.DecoratedImageF"
        persistable: "DecoratedImageF"
        storage:     "FitsStorage"
        level:       "Ccd"
        tables:      raw
    }
    snapExp: {
        template:    "snapExp/v%(visit)d-f%(filter)s/s%(snap)d/R%(raft)s/S%(sensor)s.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Ccd"
        tables:        raw
    }
    postISRCCD: {
        template:    "postISRCCD/v%(visit)d-f%(filter)s/R%(raft)s/S%(sensor)s.fits"
    }
    icExp: {
        template:      "icExp/v%(visit)d-f%(filter)s/R%(raft)s/S%(sensor)s.fits"
    }
    calexp: {
        template:      "calexp/v%(visit)d-f%(filter)s/R%(raft)s/S%(sensor)s.fits"
    }
    calsnap: {
        template:      "calsnap/v%(visit)d-f%(filter)s/s%(snap)d/R%(raft)s/S%(sensor)s.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Ccd"
        tables:        raw
    }
    deepCoadd_tempExp: {
        template:    "deepCoadd/%(filter)s/%(tract)d/%(patch)stempExp/v%(visit)d-f%(filter)s.fits"
    }
    goodSeeingCoadd: {
        persistable: ExposureF
        storage: FitsStorage
        python: lsst.afw.image.ExposureF
        template: goodSeeingCoadd/%(filter)s/%(tract)d/%(patch)s.fits
        level: Skytile
    }
    goodSeeingCoadd_tempExp: {
        template:    "goodSeeingCoadd/%(filter)s/%(tract)d/%(patch)stempExp/v%(visit)d-f%(filter)s.fits"
        python:      lsst.afw.image.ExposureF
        persistable: ExposureF
        storage:     FitsStorage
        level:       Skytile
        tables:      'raw'
    }
    wcs: {
        template:      "wcs/v%(visit)d-f%(filter)s/R%(raft)s/S%(sensor)s.wcs.fits"
    }
    fcr: {
        template:      "fcr/v%(visit)d-f%(filter)s/R%(raft)s/S%(sensor)s.fcr.fits"
        python:        "lsst.afw.image.ExposureI"
        persistable:        "ExposureI"
        storage:    "FitsStorage"
        level:        "Ccd"
        tables:        "raw"
        tables:        "raw_visit"
    }
    dcrModel: {
        template:    "dcrModel/%(filter)s%(subfilter)s/%(tract)d/%(patch)s.fits"
        python:      "lsst.afw.image.ExposureF"
        persistable: "ExposureF"
        storage:     "FitsStorage"
        level:       "None"
        tables:      raw
    }
    deepDiff_differenceExp: {
        template:      "deepDiff/v%(visit)d-f%(filter)s/R%(raft)s/diffexp-S%(sensor)s.fits"
    }
    deepDiff_matchedExp: {
        template:      "deepDiff/v%(visit)d-f%(filter)s/R%(raft)s/matchexp-S%(sensor)s.fits"
    }
}

calibrations: {
    bias: {
        template:    "bias/v0/R%(raft)s/S%(sensor)s/imsim_0_R%(raft)s_S%(sensor)s_C%(channel)s.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Amp"
        refCols: "raft"
        refCols: "sensor"
        refCols: "visit"
        refCols: "filter"
        refCols: "channel"
    }
    dark: {
        template:    "dark/v1/R%(raft)s/S%(sensor)s/imsim_1_R%(raft)s_S%(sensor)s_C%(channel)s.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Amp"
        refCols: "raft"
        refCols: "sensor"
        refCols: "visit"
        refCols: "filter"
        refCols: "channel"
    }
    flat: {
        template:    "flat/v2-f%(filter)s/R%(raft)s/S%(sensor)s/imsim_2_R%(raft)s_S%(sensor)s_C%(channel)s.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Amp"
        reference:    "raw"
        columns:      "filter"
        refCols: "raft"
        refCols: "sensor"
        refCols: "visit"
        refCols: "filter"
        refCols: "channel"
    }
    fringe: {
        template:    "fringe/v2-f%(filter)s/R%(raft)s/S%(sensor)s/imsim_2_R%(raft)s_S%(sensor)s_C%(channel)s.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Amp"
        reference:    "raw"
        columns:      "filter"
        refCols: "raft"
        refCols: "sensor"
        refCols: "visit"
        refCols: "filter"
        refCols: "channel"
    }
}

datasets: {
    ampExposureId: {
        template:     "ignored"
        # Provide something to import, although we actually return a tuple
        python:       "lsst.daf.base.PropertySet"
        persistable:  "ignored"
        storage:      "ignored"
        tables:       "raw"
    }
    ampExposureId_bits: {
        template:     "ignored"
        # Provide something to import, although we actually return a tuple
        python:       "lsst.daf.base.PropertySet"
        persistable:  "ignored"
        storage:      "ignored"
        tables:       "raw"
    }
    icExpBackground: {
        template:      "icExp/v%(visit)d-f%(filter)s/R%(raft)s/bkgd-S%(sensor)s.fits"
    }
    calexpBackground: {
        template:      "calexp/v%(visit)d-f%(filter)s/R%(raft)s/bkgd-S%(sensor)s.fits"
    }
    icSrc: {
        template:      "icSrc/v%(visit)d-f%(filter)s/R%(raft)s/S%(sensor)s.fits"
    }
    background_values: {
        template:    "background_values/%(visit)d.txt"
        python:      "lsst.obs.lsstSim.BackVals"
        persistable: "BaseCatalog"
        storage:     "FitsCatalogStorage"
    }
    icMatch: {
        template:      "icMatch/v%(visit)d-f%(filter)s/R%(raft)s/S%(sensor)s.fits"
        python:        "lsst.afw.table.BaseCatalog"
        persistable:        "BaseCatalog"
        storage:    "FitsCatalogStorage"
        tables:        raw
    }
    srcMatch: {
        template:      "srcMatch/v%(visit)d-f%(filter)s/R%(raft)s/S%(sensor)s.fits"
    }
    forced_src: {
        template:      "forced/%(tract)d/v%(visit)d-f%(filter)s/R%(raft)s/S%(sensor)s.fits"
        persistable:        "SourceCatalog"
    }
    forced_src_schema: {
        template:      "schema/forced.fits"
    }
    forcedPhotCcd_metadata: {
        template: "forcedPhotCcd_metadata/tract%(tract)d/%(visit)d-%(sensor)s.boost"
    }
    src: {
        template:      "src/v%(visit)d-f%(filter)s/R%(raft)s/S%(sensor)s.fits"
    }
    Mosaic_metadata: {
        template:      "metadata/Mosaic.boost"
        python:        "lsst.daf.base.PropertySet"
        persistable:        "PropertySet"
        storage:    "BoostStorage"
        tables:        raw
    }
    processCcd_metadata: {
        template:      "processCcd_metadata/v%(visit)d-f%(filter)s/R%(raft)s/S%(sensor)s.boost"
    }
    isr_config: {
        python:        "lsst.obs.lsstSim.LsstSimIsrConfig"
    }
    isr_metadata: {
        template:      "isr_metadata/v%(visit)d-f%(filter)s/R%(raft)s/S%(sensor)s.boost"
    }
    characterizeImage_metadata: {
        template:      "characterizeImage_metadata/v%(visit)d-f%(filter)s/R%(raft)s/S%(sensor)s.boost"
    }
    calibrate_metadata: {
        template:      "calibrate_metadata/v%(visit)d-f%(filter)s/R%(raft)s/S%(sensor)s.boost"
    }
    processEimage_config: {
        template:      "config/processEimage.py"
        python:        "lsst.obs.lsstSim.processEimage.ProcessEimageConfig"
        persistable:      "Config"
        storage:    "ConfigStorage"
        tables:        raw
    }
    processEimage_metadata: {
        template:      "processEimage_metadata/v%(visit)d-f%(filter)s/s%(snap)i/R%(raft)s/S%(sensor)s.boost"
        python:        "lsst.daf.base.PropertySet"
        persistable:        "PropertySet"
        storage:    "BoostStorage"
        tables:        raw
    }
    deep_measureMulti_config: {
        template:      "config/deep_measureMulti.py"
        python:        "lsst.meas.multifit.measureMulti.MeasureMultiConfig"
        persistable:      "Config"
        storage:    "ConfigStorage"
        tables:        raw
    }
    deep_safeClipAssembleCoadd_metadata: {
        template:      "deep_safeClipAssembleCoadd_metadata/%(filter)s/%(tract)d/%(patch)s.boost"
    }
    deepCoadd_srcMatch: {
        template:      "deepCoadd-results/%(filter)s/%(tract)d/%(patch)s/srcMatch-%(filter)s-%(tract)d-%(patch)s.fits"
    }
    deepCoadd_forced_src: {
        template:      "deepCoadd-results/%(filter)s/%(tract)d/%(patch)s/forced-%(filter)s-%(tract)d-%(patch)s.fits"
    }
    deepCoadd_forced_config: {
        template:      "config/deepCoadd_forced.py"
    }
    deepCoadd_forced_metadata: {
        template:      "deepCoadd_forced_metadata/%(filter)s/%(tract)d/%(patch)s.boost"
    }
    deepCoadd_forced_schema: {
        template:      "schema/deepCoadd_forced.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:        "ignored"
        storage:    "FitsCatalogStorage"
        tables:        raw
    }
    deepDiff_differenceExp: {
        template:      "deepDiff/v%(visit)d-f%(filter)s/R%(raft)s/diffexp-S%(sensor)s.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        tables:        raw
    }
    deepDiff_matchedExp: {
        template:      "deepDiff/v%(visit)d-f%(filter)s/R%(raft)s/matchexp-S%(sensor)s.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        tables:        raw
    }
    deepDiff_diaObj: {
        template:      "deepDiff/diaObj.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:        "SourceCatalog"
        storage:    "FitsCatalogStorage"
        tables:        raw
    }
    deepDiff_diaObj_schema: {
        template:      "schema/deepDiff_diaObj.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:        "SourceCatalog"
        storage:    "FitsCatalogStorage"
        tables:        raw
    }
    deepDiff_diaSrc: {
        template:      "deepDiff/v%(visit)d-f%(filter)s/R%(raft)s/diaSrc-S%(sensor)s.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:        "SourceCatalog"
        storage:    "FitsCatalogStorage"
        tables:        raw
    }
    deepDiff_diaObj_schema: {
        template:      "schema/deepDiff_diaObj.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:        "SourceCatalog"
        storage:    "FitsCatalogStorage"
        tables:        raw
    }
    deepDiff_diaSrc: {
        template:      "deepDiff/v%(visit)d-f%(filter)s/R%(raft)s/diaSrc-S%(sensor)s.fits"
    }
    deepDiff_kernelSrc: {
        template:      "deepDiff/v%(visit)d-f%(filter)s/R%(raft)s/kernelSrc-S%(sensor)s.fits"
    }
    deepDiff_config: {
        python:        "lsst.pex.config.Config"
        template:      "config/deepDiff.py"
        python:        "lsst.pipe.tasks.imageDifference.ImageDifferenceConfig"
        persistable:      "Config"
        storage:    "ConfigStorage"
        tables:        raw
    }
    deepDiff_metadata: {
        template:      "deepDiff/v%(visit)d-f%(filter)s/R%(raft)s/metadata-S%(sensor)s.boost"
    }
    diaObjectMakerMetadata: {
        template:      "deepDiff/diaObjectMakerMetadata.boost"
        python:        "lsst.daf.base.PropertySet"
        persistable:        "PropertySet"
        storage:    "BoostStorage"
        tables:        raw
    }
    diaObjectMakerMetadata: {
        template:      "deepDiff/diaObjectMakerMetadata.boost"
        python:        "lsst.daf.base.PropertySet"
        persistable:        "PropertySet"
        storage:    "BoostStorage"
        tables:        raw
    }

    goodSeeingCoadd_depth: {
        template:    "goodSeeingCoadd/%(filter)s/%(tract)d/%(patch)s.depth.fits"
        python:      "lsst.afw.image.ImageF"
        persistable: "ImageF"
        storage:     "FitsStorage"
        tables:      raw
    }
    goodSeeingCoadd_skyMap: {
        template:    "goodSeeingCoadd/skyMap.pickle"
        python:      "lsst.skymap.BaseSkyMap"
        persistable: "ignored"
        storage:     "PickleStorage"
        tables:      raw
    }
    goodSeeing_makeSkyMap_config: {
        template:      "config/goodSeeing_makeSkyMap.py"
        python:        "lsst.pipe.tasks.makeSkyMap.MakeSkyMapTask.ConfigClass"
        persistable:   "Config"
        storage:       "ConfigStorage"
        tables:        raw
    }
    goodSeeing_makeSkyMap_metadata: {
        template:      "metadata/goodSeeing_makeSkyMap.boost"
        python:        "lsst.daf.base.PropertySet"
        persistable:   "PropertySet"
        storage:       "BoostStorage"
        tables:        raw
    }
    goodSeeing_makeCoaddTempExp_metadata: {
        persistable: PropertySet
        storage: BoostStorage
        python: lsst.daf.base.PropertySet
        template: goodSeeing_makeCoaddTempExp_metadata/%(filter)s/%(tract)d/%(patch)s_metadata.boost
    }
    goodSeeing_makeCoaddTempExp_config: {
        persistable: Config
        storage: ConfigStorage
        python: lsst.pipe.tasks.makeCoaddTempExp.MakeCoaddTempExpConfig
        template: config/goodSeeing_makeCoaddTempExp.py
    }
    goodSeeing_safeClipAssembleCoadd_config: {
        persistable: Config
        storage: ConfigStorage
        python: lsst.pipe.tasks.assembleCoadd.SafeClipAssembleCoaddConfig
        template: config/goodSeeing_safeClipAssembleCoadd.py
    }
    goodSeeing_safeClipAssembleCoadd_metadata: {
        persistable: PropertySet
        storage: BoostStorage
        python: lsst.daf.base.PropertySet
        template: goodSeeing_assembleCoadd_metadata/%(filter)s/%(tract)d/%(patch)s.boost
    }
    goodSeeing_assembleCoadd_config: {
        template:      "config/goodSeeing_assembleCoadd.py"
        python:        "lsst.pipe.tasks.assembleCoadd.AssembleCoaddConfig"
        persistable:      "Config"
        storage:    "ConfigStorage"
        tables:        raw
    }
    goodSeeing_assembleCoadd_metadata: {
        template:      "goodSeeing_assembleCoadd_metadata/%(filter)s/%(tract)d/%(patch)s.boost"
        python:        "lsst.daf.base.PropertySet"
        persistable:        "PropertySet"
        storage:    "BoostStorage"
        tables:        raw
    }
    goodSeeing_coadd_config: {
        template:      "config/goodSeeing_coadd.py"
        python:        "lsst.pipe.tasks.coadd.CoaddConfig"
        persistable:      "Config"
        storage:    "ConfigStorage"
        tables:        raw
    }
    goodSeeing_coadd_metadata: {
        template:      "goodSeeing_coadd_metadata/%(filter)s/%(tract)d/%(patch)s.boost"
        python:        "lsst.daf.base.PropertySet"
        persistable:        "PropertySet"
        storage:    "BoostStorage"
        tables:        raw
    }
    goodSeeingCoadd_icSrc: {
        template:      "goodSeeingCoadd-results/%(filter)s/%(tract)d/%(patch)s/icSrc-%(filter)s-%(tract)d-%(patch)s.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:        "ignored"
        storage:    "FitsCatalogStorage"
        tables:        raw
    }
    goodSeeingCoadd_icSrc_schema: {
        template:      "schema/goodSeeingCoadd_icSrc.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:        "ignored"
        storage:    "FitsCatalogStorage"
        tables:        raw
    }
    goodSeeingCoadd_icMatch: {
        template:      "goodSeeingCoadd-results/%(filter)s/%(tract)d/%(patch)s/icMatch-%(filter)s-%(tract)d-%(patch)s.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:        "ignored"
        storage:    "FitsCatalogStorage"
        tables:        raw
    }
    goodSeeingCoadd_apCorr: {
        template:      "goodSeeingCoadd-results/%(filter)s/%(tract)d/%(patch)s/apCorr-%(filter)s-%(tract)d-%(patch)s.pickle"
        python:        "lsst.meas.algorithms.ApertureCorrection"
        persistable:        "ApertureCorrection"
        storage:    "PickleStorage"
        tables:        raw
    }
    goodSeeingCoadd_src: {
        template:      "goodSeeingCoadd-results/%(filter)s/%(tract)d/%(patch)s/src-%(filter)s-%(tract)d-%(patch)s.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:        "ignored"
        storage:    "FitsCatalogStorage"
        tables:        raw
    }
    goodSeeingCoadd_src_schema: {
        template:      "schema/goodSeeingCoadd_src.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:        "ignored"
        storage:    "FitsCatalogStorage"
        tables:        raw
    }
    goodSeeingCoadd_calexpBackground: {
        template:      "goodSeeingCoadd-results/%(filter)s/%(tract)d/%(patch)s/bkgd-%(filter)s-%(tract)d-%(patch)s.fits"
        python:        "lsst.afw.math.BackgroundList"
        persistable:   "PurePythonClass"
        storage:       "FitsCatalogStorage"
        tables:        raw
    }
    goodSeeing_srcMatch: {
        template:      "goodSeeingCoadd-results/%(filter)s/%(tract)d/%(patch)s/srcMatch-%(filter)s-%(tract)d-%(patch)s.fits"
        python:        "lsst.afw.table.BaseCatalog"
        persistable:        "ignored"
        storage:    "FitsCatalogStorage"
        tables:        raw
    }

    goodSeeingDiff_differenceExp: {
        template:      "goodSeeingDiff/v%(visit)d-f%(filter)s/R%(raft)s/diffexp-S%(sensor)s.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        tables:        raw
    }
    goodSeeingDiff_matchedExp: {
        template:      "goodSeeingDiff/v%(visit)d-f%(filter)s/R%(raft)s/matchexp-S%(sensor)s.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        tables:        raw
    }
    goodSeeingDiff_diaSrc: {
        template:      "goodSeeingDiff/v%(visit)d-f%(filter)s/R%(raft)s/diaSrc-S%(sensor)s.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:        "SourceCatalog"
        storage:    "FitsCatalogStorage"
        tables:        raw
    }
    goodSeeingDiff_diaSrc_schema: {
        template:      "schema/goodSeeingDiffSrc.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:        "SourceCatalog"
        storage:    "FitsCatalogStorage"
        tables:        raw
    }
    goodSeeingDiff_diaObj: {
        template:      "goodSeeingDiff/diaObj.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:        "SourceCatalog"
        storage:    "FitsCatalogStorage"
        tables:        raw
    }
    goodSeeingDiff_diaObj_schema: {
        template:      "schema/goodSeeingDiff_diaObj.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:        "SourceCatalog"
        storage:    "FitsCatalogStorage"
        tables:        raw
    }
    goodSeeingDiff_kernelSrc: {
        template:      "goodSeeingDiff/v%(visit)d-f%(filter)s/R%(raft)s/kernelSrc-S%(sensor)s.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:        "SourceCatalog"
        storage:    "FitsCatalogStorage"
        tables:        raw
    }
    goodSeeingDiff_config: {
        template:      config/goodSeeingDiff.py
        python:        lsst.pipe.tasks.imageDifference.ImageDifferenceConfig
        persistable:   Config
        storage:       ConfigStorage
        tables:        'raw'
    }
    goodSeeingDiff_metadata: {
        template:      "goodSeeingDiff/v%(visit)d-f%(filter)s/R%(raft)s/metadata-S%(sensor)s.boost"
        python:        lsst.daf.base.PropertySet
        persistable:   PropertySet
        storage:       BoostStorage
        tables:        'raw'
    }
    goodSeeingCoadd_srcMatch: {
        template:      "deepCoadd-results/%(filter)s/%(tract)d/%(patch)s/srcMatch-%(filter)s-%(tract)d-%(patch)s.fits"
        python:        lsst.afw.table.BaseCatalog
        persistable:   BaseCatalog
        storage:       FitsCatalogStorage
        tables:        'raw'
    }
}
